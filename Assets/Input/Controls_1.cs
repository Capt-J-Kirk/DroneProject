//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/Controls_1.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls_1: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls_1()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls_1"",
    ""maps"": [
        {
            ""name"": ""DroneContol"",
            ""id"": ""0436f594-6010-4ebc-b3d5-cc1f7b750fbe"",
            ""actions"": [
                {
                    ""name"": ""ThrottleYaw"",
                    ""type"": ""Value"",
                    ""id"": ""35bcc9ba-a022-4d74-b41a-5c789f2a51d4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PitchRoll"",
                    ""type"": ""Value"",
                    ""id"": ""845c6f04-2883-4e4f-b002-47dc0febe6dc"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""a1444738-f01d-4bab-b210-bf913dca31c3"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ThrottleYaw"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""bc56f440-d5d5-418a-b84a-cefbb925c830"",
                    ""path"": ""<Keyboard>/#(W)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ThrottleYaw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ebc63458-aacd-427c-9cc6-b7cb406fe8dd"",
                    ""path"": ""<Keyboard>/#(S)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ThrottleYaw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""3500abe0-e5ef-48ba-863f-5adb616ce35a"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ThrottleYaw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ccc42633-a019-4b9d-b5c1-5ae8b0a087be"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ThrottleYaw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left stick"",
                    ""id"": ""a933e065-4756-4292-882b-4b70bbf62b2f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ThrottleYaw"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c265bfb2-94d1-49fe-ad96-d075af679247"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ThrottleYaw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2b44f32f-e01b-49a6-9705-80f010e4ee24"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ThrottleYaw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ccda8110-155c-4131-8d04-4fc772e4a276"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ThrottleYaw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e8dc32ee-fbb6-4f76-ad1b-881fa6d28e59"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ThrottleYaw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrow keys"",
                    ""id"": ""7d7e6b6f-13b9-48e4-ac85-64a21da5ba9a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PitchRoll"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""3e33e30c-b59f-4f75-8e0f-f5ed8d3d3257"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PitchRoll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a0ff9ef2-7407-42f1-b1d7-462b8f5b7a55"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PitchRoll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e44e1f58-8c6c-4319-9cce-0f3475f4a26d"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PitchRoll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""00090af8-b6f7-48ed-bf7b-f5dd8236457e"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PitchRoll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right stick"",
                    ""id"": ""4be4c9f2-7648-4d4d-9c88-139999abe8d6"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PitchRoll"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""efb1461a-5d87-4765-ab2d-e31032f83b9a"",
                    ""path"": ""<Gamepad>/rightStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PitchRoll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""aebb2084-63a8-4e4d-a3fa-781e52ca08fe"",
                    ""path"": ""<Gamepad>/rightStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PitchRoll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e7b10d2f-2a80-44c4-a036-7828adb20c7b"",
                    ""path"": ""<Gamepad>/rightStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PitchRoll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""959fb068-5f3b-4500-96d3-cdec6b71aff1"",
                    ""path"": ""<Gamepad>/rightStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PitchRoll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // DroneContol
        m_DroneContol = asset.FindActionMap("DroneContol", throwIfNotFound: true);
        m_DroneContol_ThrottleYaw = m_DroneContol.FindAction("ThrottleYaw", throwIfNotFound: true);
        m_DroneContol_PitchRoll = m_DroneContol.FindAction("PitchRoll", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // DroneContol
    private readonly InputActionMap m_DroneContol;
    private List<IDroneContolActions> m_DroneContolActionsCallbackInterfaces = new List<IDroneContolActions>();
    private readonly InputAction m_DroneContol_ThrottleYaw;
    private readonly InputAction m_DroneContol_PitchRoll;
    public struct DroneContolActions
    {
        private @Controls_1 m_Wrapper;
        public DroneContolActions(@Controls_1 wrapper) { m_Wrapper = wrapper; }
        public InputAction @ThrottleYaw => m_Wrapper.m_DroneContol_ThrottleYaw;
        public InputAction @PitchRoll => m_Wrapper.m_DroneContol_PitchRoll;
        public InputActionMap Get() { return m_Wrapper.m_DroneContol; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DroneContolActions set) { return set.Get(); }
        public void AddCallbacks(IDroneContolActions instance)
        {
            if (instance == null || m_Wrapper.m_DroneContolActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DroneContolActionsCallbackInterfaces.Add(instance);
            @ThrottleYaw.started += instance.OnThrottleYaw;
            @ThrottleYaw.performed += instance.OnThrottleYaw;
            @ThrottleYaw.canceled += instance.OnThrottleYaw;
            @PitchRoll.started += instance.OnPitchRoll;
            @PitchRoll.performed += instance.OnPitchRoll;
            @PitchRoll.canceled += instance.OnPitchRoll;
        }

        private void UnregisterCallbacks(IDroneContolActions instance)
        {
            @ThrottleYaw.started -= instance.OnThrottleYaw;
            @ThrottleYaw.performed -= instance.OnThrottleYaw;
            @ThrottleYaw.canceled -= instance.OnThrottleYaw;
            @PitchRoll.started -= instance.OnPitchRoll;
            @PitchRoll.performed -= instance.OnPitchRoll;
            @PitchRoll.canceled -= instance.OnPitchRoll;
        }

        public void RemoveCallbacks(IDroneContolActions instance)
        {
            if (m_Wrapper.m_DroneContolActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDroneContolActions instance)
        {
            foreach (var item in m_Wrapper.m_DroneContolActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DroneContolActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DroneContolActions @DroneContol => new DroneContolActions(this);
    public interface IDroneContolActions
    {
        void OnThrottleYaw(InputAction.CallbackContext context);
        void OnPitchRoll(InputAction.CallbackContext context);
    }
}
